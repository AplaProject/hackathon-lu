contract Roles_Assign {
    data {
        rid int
        member_id int
    }

    conditions {
        $role_map = DBFind("roles").Columns("id,deleted,role_type,role_name,image_id,creator->member_id").Where("id=?", $rid).Row()
        if !$role_map {
            warning "Role not found"
        }

        $member_map = DBFind("members").Where("id=?", $member_id).Row()
        if !$member_map {
            warning "Member not found"
        }

        $appointer_map = DBFind("members").Where("id=?", $key_id).Row()
        if !$appointer_map {
            warning "Appointer not found"
        }

        if $role_map["deleted"] == 1 {
            warning "This role has been deleted. The appointment of members is impossible"
        }

        var specialRules map prev_contract string stack array
        stack = JSONDecode(JSONEncode($stack))
        prev_contract = stack[0]
        if Len(stack)>2{
            prev_contract = stack[Len(stack)-2]
        }
        specialRules["@1sysparams_AcceptValidator"] = "Validator"
        specialRules["@1sysparams_DelegateRefresh"] = "Delegate"
        specialRules["@1sysparams_CandidateValidatorRequest"] = "Candidate for validators"
        specialRules["@1voting_TemplateRun"] = "Investor with voting rights"
        specialRules["@1tokenrefund_Start"] = "Investor with voting rights"
        if specialRules[prev_contract] != $role_map["role_name"] {
            Roles_CheckAccess("rid", $rid)
        }

        $assigned = DBFind("roles_participants").Where("role->id=? and member->member_id=? and deleted=0", $rid, $member_id).One("id")
        // if $assigned {
        //     warning "This member has already been added"
        // }
    }

    action {
        if $assigned {
            return
        }
        var role map
        role["id"] = $role_map["id"]
        role["type"] = $role_map["role_type"]
        role["name"] = $role_map["role_name"]
        role["image_id"] = $role_map["image_id"]

        var member map
        member["member_id"] = $member_map["id"]
        member["member_name"] = $member_map["member_name"]
        member["image_id"] = $member_map["image_id"]

        var appointed map
        appointed["member_id"] = $appointer_map["id"]
        appointed["member_name"] = $appointer_map["member_name"]
        appointed["image_id"] = $appointer_map["image_id"]

        DBInsert("roles_participants", "role,member,appointed,timestamp date_created", role, member, appointed, $block_time)
    }
}